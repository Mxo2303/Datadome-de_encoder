const { DataDomeDecryptor } = require('../datadome-de-encoder/src/index.js');
const fs = require('fs');
const path = require('path');

// Paramètres extraits de payload.txt
const hash = "E6EAF460AA2A8322D66B42C85B62F9";
const cid = "555MAOBIIVcO~ayUK3Tm4j9ZbRlZzDff5osUo3oWgzLY4KaB99kYWZJe01qFFpJvBCG4805UbG28PeRGWNEZM63b154ZbJzSI8xCa5MNlDk26n7eb_CXv9u3g~S3C4xp";
const encryptedPayload = "PmRDbNihdAI36FxXflyd9eIzJNJ3Vo0OeQAmdRANANT1vbzC1cPlte3_I0dOTIFqktgDWTczkmRGano3MdN1vLaR6e6dfsVoNnfgcvoHEA02J6PzPnhAajyTf_P66eb-VeG3LvvnND6W1xTkr76-pyUkiu5hpBCDvEZjo6Nzw_ST8goCE5-Tf_H0A20vqfF5cbqbWRPVJSmECQcV8pNLGiqUGr5B3krgRM-Xgs7X_hABMHnl9a5i-p_Onz0C3iiMqn4VX4thiXwBe3siMf2yaoowRoLLe-k7FlkeUWakKtRS5osj2Li4u5rA_1R0g9XBpAm2g3dt0knoN5LJu5SJXFxXCyYb5LzjzYRMCgrVaq8KryV4gMlJVHNMfnJNnngsrIFmOf4J4eoEs5UVub1_-qyrKyKE-F7hMpwKkEul_lSwbETugoxDwcRYuCH_vbRr0C78k2nKlB9LQxhniu_bbM0Mf8GMKn23H4JVRhVrwEuACMMp5LzS49e4W5nNda9ivwhKTCY46rnbQ9pKUqnruEc5TJC2M-RCEa7-mxKfjm1sOmwKIqLgLVs7rHse_BUgSFIIY7OjqJuK9q6FBp5wpx24U9Uu0F0-HRkkrscx7ovvDLRGffPMKUkcX26QPCSyWf5hr6rBRcjy0AETJ5HBkUky30pTcv00yf-CeWgEBD0f_X5Gjc57JmA-GNPwVnLj1lhDf3hmeISZILsc2w6RcFFDT5BBn4O9DiP7SityxPlSQdFbdTNAM0qxvNfna9jdUI8-op-iYiezspaPQifS8MKrGyxc33cVICSahZro5Jf4rnRr6Iy-za1GUt5KxuRhAbR0NoiDRm9vNR4YT_8TwFoTvJbtrLQZBo0OpebE-M9H_zpglOe4iSYN82WmpFckIlYCFTZm5MhpAd72Ex_gUD1Wmt4meplN_HT7KbzYIeLnraTpKWsZhTlnHVmoMF9KeAKTj-yqRiaH-rR0UU-HcI422-bM9Bv4eGFIJp741iTqwK124HM7k5To1NalhlNhyfOTST36a9veI_nja37WgwXGJTJrbL7LrrC5VSzcixhgllDTz6i1goBmhttFIAnwOPuMfJD-rQ_GvmFnlhfHMqFAyvH1YfAOhEuR68wTRO6n15wl9ovbupyofcWfWudgZW_3C2yXdcDr0ezqC1XobjiZEA9h5mQF3DLJvzq_3HwKDnJyTpkE2xxLRbXPO8No1M-bOD4NjiTx75itYYK9hzMwbne1Ixe6vdHHyMg9sDZlkvu-OB0AiYa1tVzB7Az614JgKO71vIvoKg4UqdaJ2Q6-E0X8O9rbsWtIva8PGog1gkio7MEdUIbPRsoe9J_ntyhjblrJcXlKHs3EF-fIe5G-RG8M1ykR0tlT18So9OCZBhXJVZ3rVovst3ZSeQOZ_cyu-ddgG2LcKsopeMjBYdhkwBjSXhMtuoUq2IWOuuGV8gi3xkq0Hj98P3h4WMmjni8LLVQ3OasSSDHo4ArCADyJ3PjUqj7k3tVma9a9IOwOibBvj_nFYdZxrdoFdfu_dM4G4C3Ut6d6f5jnAgZpZ95rIYDMNmXXSUL778qNx4oWLBD8XsBR-Ch5Si_wf4PyZPsIgecr0dQRmKv-adOpIYoH6XO7zqvK9fsX2gbB-lzivFx3v3hrytwkoavSOi4Zc5b_8vYyc6sVrqLHkgUYRv_DNPmNPSJbmq6-LhBI2y11MgrOUFjwtLLtlLW_uloBQUw1ivYi285mUyCK2OiJkE2FVEmjj0aNf1Pd8LXGflPsJf7bB6Rw0ZDH5yChuUSFNfuNb-nK7HBj6se5vtS0axTqX2kYghIDn-cws43E0zE3A1IbuD6YAsX1luGnRHL410PKoqZcei1MuzDc2E1aT0kBSWMbjrLdOUfbL9I3jeFXoJeO3SsMgM8STZasDkptRoD6VRy4A6v31BTX1JmrQAGNfxZBmHFH6madkj8RllQFy70xQY969e0n6LYKKyUfqvZl5mlaDfE5rdbm835-QRRiYVdbcB77UXpFcQq01vdB6du-9SyVOeGoCTmCFLAbo1OgmxMp5l15rDWwiVZ3sJL-sn-Z7vKdeTLcej5zHwFEYYYgRy_eXcLs1BGGtFn8QXA3_JV7e9L75cTsWQXLXb3-91UqKVi88qVamP5kYnY1rrFET2t4z3wqqSVclrMZJhM8IwbEWetLCPyVCU4X8zOngKLjqvGv7EboPZwHdZY_FwjnxdZKrejT7jUagTeqW8w73ziZHpUE0Jv0oH1qWiJXR9W-w7SsQeXlgnvtv0zeheb3NbXg7ziGzSHa0TUjmpeB8lTqpL4TtvWBTKWUFEtSp2Jhgd55XDvWYl-6iYR5YEJlFKXR0DMR9AMT78FC-FrwKITV5orLEoaOEjFGbJRNqek4hai4FEvusZvxfrlv9PAn1-1LX5LMA_HJbH35gSMVWH8_KIkWLOVPRSFhsmO6aVrkq98HAN_fwppefbCK9tfeJIBSSWQqIj555LB5iJP_S5R1VCJhIGpaR_eJLOgG6d_W5uAiNtBAzqIqex-13q7mdNliQTC35RqL_EeZ2iW_MlcIEsuvCaqXCgRCEgrOVPrTAXkqVXUTsckFQubGY0keIXWYIy6WLKsqMKHydTUoIyL6Xt6zZ1kcX3qy7OHGImwTxgpSQ4629CExUT_55S76gxU_q2R6XqlL8OSMsL6gy-vqVnr_zAHXa7OZW3NI6a05z3yBvrHFtigD8ZX2PEzKcDrGT7Mnuq4GnbqgoZkOv08yPzJDXb8DiNGkP7_VlvErOQL6MTGHBQyyoX2AARXwnZr7antgERGEdwGDSSd90aNfxfwMQOm8wAbiw0_AyiCtwXwAi8CO85SQDXDjdEAfkIPCiLx58IzNoLYiuT20BBrxDgzs9ulaGbQyOaILDMx81V--hLrr8m_X9L22CEsaAmqZ-JLjQkL_a__PMgc-OebCnxZzNIN4IHpC--wH0N24x8oSFduT_xQWI-aJxUAYaT0RGxal-g-ydjFy0bigTKMpvjGxbZfGihZOnibB3J8uS65q8251zk67qZxLgZRCBmk-_Llk4WMlWOPgwrgRk2ww9gO4dWvpa2NMoMdxokiVKXLuOCkptMqvvVu0oXB3ATNMyX-ib05T5MdwjMkv38sOEd54FTO04q_249-j3_F76KJemKxnk9dch6CAJAmYtS4giSEZptn_QrEuOmRSw8MZWHOXwejXaZzT_eikJ_kOolZQdr35z79DGJYtHLrUiprkD3eTuTx92NQdtxnskHoBwdHS2AzCRjqyNqMjfLLLu7R485p__EUfuetM2wFNao_3JFJx3l3IGvhQuiCpei-QcbFuSpogq2qBVtuPcNwr21dmsKX-rzepD1tGpzTYl5lAy788PGq29siKQFCtBumn3uLtK1mG2y82frefbrUER4-El2UdCJ2jn6X148GF0BqmYKCl-pP3mn5_3dDMU4hh-PVmyiXBCuYWIVFoGzLlu2DdgEg2XNHFL4Faag2nNjXc5XSW2p7cURDh9hsZ34T41ERcY_QedogCXTMVB4dUKHQ6BpQ_smFV23j4WKkyuuSot0_l0GSWiohJLXpj7YFCi0WqAJ3SqARRn6axq8A3ZLMbgE82iEC5hjcF9svC3bZSgSGstI2J67I7wzmgVlE_Jyyb-1GtnJdDIfXcY8KynzEBGzHOFC4Htbjhndx0GxO4m4GVo_nQTf2Qp6s-D5mtLCqJSwFB0pEiOV_WQE7X9VaD6HA3LFKA4IXrpujcWO_23YY16g2OLmfwZdyzWvmzZKmWzv-w38rn2w4Vjq5POWdgjZQdjGPSygT7ZFDtVb74V5dQAG1LZpQ5fO8pzm430vH3HZL7bWeq_8oE4Y63zP10b4FFS-W1ciMT9gIpfNL_s1inDNe44KfFTvbDiMJw3rn7WXtOmuzaKO6pl1APVAPSAQnIuOhoowNIDM_yS8hBWaO2oXGjhsdY3vEelhhXxOLZ1n_27uAZHJuWDZhevHI5BSxkSAhXPQPu-oQ2ymhmBxA8KDFkUF2n5xNTMyxd79qYKVm-4pmBBlmwC1C2H3bRDjZkck2zE6PHU16PUrega_lGypeM6tU0aFvqZHZwXd9A281_dalRW4tLlQyoAb2fOcPRkj1mXidLV5zRvSpMgcS7OmFO0qt2RgVz1LEQMMUv43VJp-w6Op6UZeXcmceFT-MNSG2KR0pBKEY9fdjG5SkGi9T9Mu2iXBaTZqhbIwHTabNl13-Be7JC7SW_wvJE4rjuL1_Di4RxqUR7NLOE8o70ibVHk42dglmQrN6DBtBvU_FV0Gy5_-f4s42LrVVJyvy4BsGHw5UdKPkl6yN0VR_z4PxsHwX35gblB9pcOQ8fRct4-9PUjSHJHQ76rkACWETrZ_g6hCZGkI_6kh5aYO3awrBrHJgpV2AWXgworHVltux1vvHL1SrDK-uHF0mxRHzn5GnkPZ40caGDzJbFfTFQMOGw4Rq5Is_-sGoqOcArvVYrG5P-493SmpAXY_Se6oAfMZzDXcirZus0SYPUiV-Y9dGTzb_eihacOMnwKoXSZrGv96ZGiREwq_DnYPoIcwqk7fWRjt_LQNxqzyUynX4MjIHGHjk760hcgpkWcFwPvGIe_c09lFZAYlRlVn0oflEeobVKeuiPDRCIXP9owrPsXB5tWg4wsstYCGUe_9JxwYUTgdUi_6LP-Md_IJqgnYWzZW-0XqiSfKNZRyvwloFZ4vjKSz3Ao9WND9CTW_QHBa_krUqIks9kSRf_98XPzN6DPBMkQ1o6d5TTaPPLTWNIZ1hbYDnRBOBbFvSoGlb-eXfERpotAW_d0rcbLvHybJcXWOW_dqGmd4CyPg8uVENOAtL__5-bDsFdXyAWTgbtZB8Qk1irmVgNe2ak1-xVOzRpNy0c8SDjfwUnK7fcLcqPCjJyo7BvfUVYe6XhsA8AYyAKt8vLjPHgF7iJ80kE3AKl5GejiowfkhbwcCiD4RNBNuOXmTw3oi5WA3qbxy08rxQNyluTk_mcZvcznXKALXT-eHb8zWtHdLVLClirjtN7Bi_gw5RCXmEW2nI-f14nklzmq8wWotaUkB4jZmOmIc4ZyAvupLB4R2-pLmZ1A2RdvObzxLLZZPoioOgq-eopp6DQFi6gFU_4KcJ4eGCKHam-65Sg3aAhD2YvfCht88FNuQt2e-hgiO9SHSxOEX3xOninNDuZJ1KKruu8DwDy3pO5eVbvpWrkIk-KK9bxFzdapBKC9PJr0D8tGwa3E7SvHqBYuYaMtwSABvzLD0y-aZnW6TE4W9ilfTRVrhpDX0kkXpXNzu_81HDXwLlwPRVYNadNraaghD_qaMcVCBdRJk_It3ZuCPWo0CQDA0Iivyzpzgtl8WPdaHqgBUB-028wK369E2WD-N_pEsJrOQVYYn4M3fYLIzG1neWQqAw9HiumfcdkRi14GwWXoCcb9QWNyBXNxj-73naea-p0ke2bZGVLsnFA_0Ay_KtKcIbQ71KxBgxqh13wSFprxHdpPcHm6ISya2I1rEyV_aJUm3iOqk_Yo1lTeQqQ-L6BAu1j7uyVebNKM_3Ut6ZHqeUwx1e2UFFwmBt8vLVgDmAnVMTgoWwTjiYTDggvq5XL6Wgclshi8A9lR3CaiNEAoPNSIxmnQG_en49PNzjZdbkSF5owh-tpZcNa67UNPVt-gvQSM_ysjEoSO7ei5QaXWNlCNJU8pFoA-RIkYf5jnvkStEB7HsQPh70vIB4cKq_i9GU5qTWq7sZx2BBIKBeP0fFuzCwYv5yPXaiXdKQaVCEO6LZb_CCZ_VHiFfIt8JySVk17AAdpg2TCIwE1WYa-LtVFViNG78G5m55aZm3B0ndWgZjIp9Wz6AKXqwKrZqF6WS3EAVaBmTNctBWcupa_Z4hmUk6mtMeyCH84ZG-p5llUTiMSVDOXOREtoSugNvBy0kRg2GPlsVO5QYMlywxAdoTtqhlW4Rm8gHjQSP4vS18AAZHND7Y4njgXXae7oYTAVeX4Eoqt3NEDr85yjoJRsFoM6oVJOOaQZYQtm34_v44oPw3Tsdl3w6w6LA8vIThta0dTqdzbIgWoevLbWgOzWffnqcjMfGZDI0lajsFVQ8FSjeyy4ODQF-XxAg3gcFLT8MlFXXyskkv7xFeE6LngKvd7A6BFQu5OBcHu1TZG3hb4O9cQoJhgjXsCpdWATtcmsbMG9e-NWYjPSi8O_MU5rEXYZ4AZROYTd3EqJg5sYbSUpAfqGcO9aP4N3Mrw7LZ7RAAtXXYBRMKFxjxN4tnObkdOWE-siQBKyXB7rgu9C-PblPF6OV3jruq65bGVt9U-vEDIb13TgxsuDFlI5CKhW3OiP3j-zAR7PcuC2omS1fdT87Mh5CVFrPYX7pkTv10yRbFQZ0ujfc1hikUGLrji9pJpkfxEXL-BwyO5kj1TOFwZUeZ6PGgc8LffqxkqPl1jemuBJ-Zj14Lh1oXPeLb7HO5qT1XNHcxjT29Iqs1erbhPm3Pp8xtlgkeXIFUfCvxAp3mUV_wteoR-2q0LQMZCYPzQrM6-IY9D5EZeTgol1s9dVBmkHBNHvvP8i-fqDQ1nmbmbDp3It5Jq3FR2OKEY6Rj93m9_6CupfvHcKQn8wDDTlOJGkdbuRtK-iHZqSyWt9hcOWLqHPtnzgR1AWZwRHaGQ6PSqoUp92SXcwKoC30sCoUdOA2wuQ4tjvS7N4RZ48L_Cx6mf5SVu8mtQxIKk7P0jBcSKb_TkiajZ1y5jmCzcTVMBQ2hleK0qPndsj27giE67w2Sy2-DuUHYxAsMvAkFnqe_";

// Selon inter_out.txt, le challenge type est "interstitial"
const decryptor = new DataDomeDecryptor(
    hash,
    cid,
    null,  // On laisse le module calculer le salt depuis le payload
    "interstitial"  // TYPE CRUCIAL : inter_out.txt utilise l'interstitial
);

// Déchiffrer
const decryptedData = decryptor.decrypt(encryptedPayload);

// Convertir le résultat (array de paires [clé, valeur]) en objet JSON propre
const payloadObject = {};
decryptedData.forEach(([key, value]) => {
    payloadObject[key] = value;
});

// Créer le dossier output s'il n'existe pas
const outputDir = path.join(__dirname, 'output');
if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
}

// Écrire le résultat dans output/payload_output.json
const outputPath = path.join(outputDir, 'payload_output.json');
fs.writeFileSync(outputPath, JSON.stringify(payloadObject, null, 2), 'utf8');

console.log(`Payload déchiffré et sauvegardé dans: ${outputPath}`);
console.log(`Nombre de clés déchiffrées: ${Object.keys(payloadObject).length}`);